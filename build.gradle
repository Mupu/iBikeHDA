buildscript {
    ext {
        //load spring application.properties
        props = new Properties()
        file("src/main/resources/application.properties").withInputStream { props.load(it) }

        springBootVersion = '2.1.3.RELEASE'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        flatDir {
            dirs 'libs'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'nu.studer.jooq' version '3.0.2' // plugin to configure jooq more easily
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'me.mupu'
version = 'v0.0.1'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    // < spring >
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.flywaydb:flyway-core:5.2.4"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // < jooq >
    compile group: 'nu.studer.jooq', name: 'nu.studer.jooq.gradle.plugin', version: '3.0.3', ext: 'pom'
    implementation 'org.jooq:jooq-codegen:3.11.9' // not needed. replaced for trial version
    jooqRuntime 'mysql:mysql-connector-java:8.0.15' // for jooq code-gen
	jooqRuntime fileTree(dir: 'libs', include: '*.jar')

    // < SQL Driver >
    implementation 'mysql:mysql-connector-java:8.0.15'

    // < lombok >
    implementation 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    // < libs folder >
    implementation fileTree(dir: 'libs', include: '*.jar')
}

// # jooq configuration #
jooq {
    database(sourceSets.main) {
        jdbc {
            driver = props.getProperty("spring.datasource.driver-class-name")
            url = props.getProperty("spring.datasource.url")
            user = props.getProperty("spring.datasource.username")
            password = props.getProperty("spring.datasource.password")
        }
        generator {
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = props.getProperty("database.schema")
                excludes = 'hibernate_sequence|flyway_schema_history'
            }
            target {
                directory = 'src/main/generated'
                packageName = 'jooqGen'
            }
        }
    }
}
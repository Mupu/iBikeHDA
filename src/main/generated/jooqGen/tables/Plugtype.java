/*
 * This file is generated by jOOQ.
 */
package jooqGen.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooqGen.Ibikehda;
import jooqGen.Indexes;
import jooqGen.Keys;
import jooqGen.tables.records.PlugtypeRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Plugtype extends TableImpl<PlugtypeRecord> {

    private static final long serialVersionUID = 20861171;

    /**
     * The reference instance of <code>ibikehda.plugtype</code>
     */
    public static final Plugtype PLUGTYPE = new Plugtype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlugtypeRecord> getRecordType() {
        return PlugtypeRecord.class;
    }

    /**
     * The column <code>ibikehda.plugtype.PlugTypeID</code>.
     */
    public final TableField<PlugtypeRecord, UInteger> PLUGTYPEID = createField("PlugTypeID", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>ibikehda.plugtype.Type</code>.
     */
    public final TableField<PlugtypeRecord, String> TYPE = createField("Type", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * Create a <code>ibikehda.plugtype</code> table reference
     */
    public Plugtype() {
        this(DSL.name("plugtype"), null);
    }

    /**
     * Create an aliased <code>ibikehda.plugtype</code> table reference
     */
    public Plugtype(String alias) {
        this(DSL.name(alias), PLUGTYPE);
    }

    /**
     * Create an aliased <code>ibikehda.plugtype</code> table reference
     */
    public Plugtype(Name alias) {
        this(alias, PLUGTYPE);
    }

    private Plugtype(Name alias, Table<PlugtypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Plugtype(Name alias, Table<PlugtypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Plugtype(Table<O> child, ForeignKey<O, PlugtypeRecord> key) {
        super(child, key, PLUGTYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ibikehda.IBIKEHDA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLUGTYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlugtypeRecord, UInteger> getIdentity() {
        return Keys.IDENTITY_PLUGTYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlugtypeRecord> getPrimaryKey() {
        return Keys.KEY_PLUGTYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlugtypeRecord>> getKeys() {
        return Arrays.<UniqueKey<PlugtypeRecord>>asList(Keys.KEY_PLUGTYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Plugtype as(String alias) {
        return new Plugtype(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Plugtype as(Name alias) {
        return new Plugtype(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Plugtype rename(String name) {
        return new Plugtype(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Plugtype rename(Name name) {
        return new Plugtype(name, null);
    }
}
